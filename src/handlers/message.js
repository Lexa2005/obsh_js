const logger = require('../logger');
const replaceLinks = require('../utils/replaceLinks');
const config = require('../config');
const formatLog = require('../utils/logFormatter'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤

let lastMessageTime = 0;

function messageHandler(bot, blacklist) {
    return async (msg) => {
        const currentTime = Date.now() / 1000;
        const user = msg.from;

        if (msg.chat.type !== 'private' || msg.text === '/start') {
            return;
        }

        if (blacklist.includes(user.id)) {
            bot.sendMessage(msg.chat.id, '–í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ');
            const logMessage = formatLog(user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π', user.id, '‚ùå –í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.');
            logger.info(logMessage); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥
            return;
        }

        if (currentTime - lastMessageTime < config.COOLDOWN_TIME) {
            const cooldownTime = (lastMessageTime + config.COOLDOWN_TIME) - currentTime;
            bot.sendMessage(msg.chat.id, `–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ ${config.COOLDOWN_TIME} —Å–µ–∫—É–Ω–¥.\n–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å ${Math.floor(cooldownTime)} —Å–µ–∫—É–Ω–¥.`);
            return;
        }

        if (msg.text && msg.text.length > config.MAX_MESSAGE_LENGTH) {
            bot.sendMessage(msg.chat.id, `–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${config.MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
            return;
        }

        let messageText = msg.text ? replaceLinks(msg.text) : '';

        const sendMessage = async () => {
            try {
                const channelId = process.env.TG_CHANNEL;

                if (msg.photo && config.ALLOW_PHOTO) {
                    await bot.sendPhoto(channelId, msg.photo[0].file_id);
                    const logMessage = formatLog(user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π', user.id, 'üì∏ –û—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ.');
                    logger.info(logMessage); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥
                } else if (msg.video && config.ALLOW_VIDEO) {
                    await bot.sendVideo(channelId, msg.video.file_id);
                    const logMessage = formatLog(user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π', user.id, 'üé• –û—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ.');
                    logger.info(logMessage); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥
                } else if (msg.audio && config.ALLOW_AUDIO) {
                    await bot.sendAudio(channelId, msg.audio.file_id);
                    const logMessage = formatLog(user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π', user.id, 'üéµ –û—Ç–ø—Ä–∞–≤–∏–ª –∞—É–¥–∏–æ.');
                    logger.info(logMessage); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥
                } else if (msg.voice && config.ALLOW_VOICE) {
                    await bot.sendVoice(channelId, msg.voice.file_id);
                    const logMessage = formatLog(user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π', user.id, 'üéôÔ∏è –û—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
                    logger.info(logMessage); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥
                } else if (msg.text && config.ALLOW_TEXT) {
                    await bot.sendMessage(channelId, messageText);
                    const logMessage = formatLog(user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π', user.id, `üìù –ù–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: "${messageText}".`);
                    logger.info(logMessage); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥
                }

                lastMessageTime = currentTime;
            } catch (error) {
                const errorLogMessage = formatLog(user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π', user.id, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ${error}`);
                logger.error(errorLogMessage); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥ –æ—à–∏–±–∫–∏
            }
        };

        sendMessage();
    };
}

module.exports = messageHandler;